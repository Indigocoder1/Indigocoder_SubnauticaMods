using System;
using System.IO;
using System.Reflection;
using System.Windows.Forms;
using UnityEngine;
using Ingredient = CraftData.Ingredient;

namespace CustomCraftGUI.Monobehaviors
{
    public class CustomCraftFormatter : MonoBehaviour
    {
        public CustomItemsManager itemsManager;

        private CustomCraftVersion customCraftVersion = CustomCraftVersion.NotSet;

        public void SetVersion(int version)
        {
            switch (version)
            {
                case -1:
                    customCraftVersion = CustomCraftVersion.NotSet;
                    break;
                case 2:
                    customCraftVersion = CustomCraftVersion.CC2;
                    break;
                case 3:
                    customCraftVersion = CustomCraftVersion.CC3;
                    break;
                default:
                    Debug.LogError($"Invalid version number ({version}) trying to be assigned!");
                    break;
            }
        }

        public void ExportFile()
        {
            SaveFileDialog sfd = new();
            sfd.Filter = "Text Files|*.txt";
            sfd.Title = "Choose export location";
            sfd.ShowDialog();

            if(string.IsNullOrEmpty(sfd.FileName))
            {
                Plugin.logger.LogInfo("Aborting save due to invalid file location");
                return;
            }

            string formattedString = "# AUTOGENERATED BY CUSTOM CRAFT GUI\n";
            formattedString += "# (Created by Indigocoder)\n";
            formattedString += "# Note that you need to place the images for your items in the CustomCraft(2/3)/Assets folder\n";
            formattedString += "# The image names need to be the same as the ItemID for each item\n\n";
            formattedString += "AliasRecipes:\n(\n";

            int itemsIndex = 0;
            foreach (CustomItem customItem in itemsManager.customItems)
            {
                formattedString += GetFormattedItem(customItem, itemsIndex == itemsManager.customItems.Count - 1);
                itemsIndex++;
            }

            FileStream fileStream = new FileStream(sfd.FileName, FileMode.Create, FileAccess.Write);
            StreamWriter writer = new StreamWriter(fileStream);
            writer.Write(formattedString);
            writer.Flush();
            writer.Close();
        }

        private string GetFormattedItem(CustomItem item, bool endOfFile)
        {
            VerifyImageInAssetsFolder(item);

            string formattedString = "";

            formattedString += $"    ItemID: {item.itemID};\n";
            formattedString += $"    DisplayName: \"{item.displayName}\";\n";
            formattedString += $"    AmountCrafted: {item.amountCrafted};\n";
            formattedString += $"    Ingredients:\n";

            int ingredientIndex = 0;
            foreach (Ingredient ingredient in item.ingredients)
            {
                string endChar = ingredientIndex != item.ingredients.Count - 1 ? "," : ";";
                formattedString += $"        ( ItemID: {ingredient.techType}; Required: {ingredient.amount}; ){endChar}\n";
                ingredientIndex++;
            }

            if (item.linkedItems.Count > 0)
            {
                formattedString += "    LinkedItemIDs: ";
                int linkedItemIndex = 0;
                foreach (Ingredient linkedItem in item.linkedItems)
                {
                    string endChar = linkedItemIndex != item.linkedItems.Count - 1 ? "," : ";\n";
                    for (int i = 0; i < linkedItem.amount; i++)
                    {
                        if (linkedItemIndex == item.linkedItems.Count - 1 && i < linkedItem.amount - 1)
                        {
                            endChar = ",";
                        }

                        formattedString += $"{linkedItem.techType}{endChar}";
                    }
                    linkedItemIndex++;
                }
            }

            formattedString += $"    Path: ";
            for (int i = 0; i < item.fabricatorPath.Length; i++)
            {
                string currentPathPortion = item.fabricatorPath[i];
                string endChar = i == item.fabricatorPath.Length - 1 ? ";\n" : "/";
                formattedString += $"{currentPathPortion}{endChar}";
            }

            string unlockAtStart = item.unlockAtStart ? "YES" : "NO";
            formattedString += $"    ForceUnlockAtStart: {unlockAtStart};\n";

            string endCharacter = endOfFile ? ";" : ",";
            formattedString += $"){endCharacter}";

            return formattedString;
        }

        private void VerifyImageInAssetsFolder(CustomItem item)
        {
            string dllFolder = Assembly.GetExecutingAssembly().Location;
            string pluginsFolder = Directory.GetParent(Directory.GetParent(dllFolder).FullName).FullName;
            if(!pluginsFolder.EndsWith("plugins"))
            {
                Plugin.logger.LogError($"Plugins folder not found! Where the hell am I??");
                return;
            }

            string cc2Path = Path.Combine(pluginsFolder, "CustomCraft2SML");
            string cc3Path = Path.Combine(pluginsFolder, "CustomCraft3");

            bool cc2Exists = Directory.Exists(cc2Path);
            bool cc3Exists = Directory.Exists(cc3Path);

            if (!cc2Exists && !cc3Exists)
            {
                //CC2 and CC3 not installed. Why are you even using this?
                Plugin.logger.LogInfo("Aborting image file verification due to CC2 and/or CC3 not being installed");
                return;
            }

            if(cc2Exists && !File.Exists(Path.Combine(cc2Path, $"Assets/{item.itemID}.png")))
            {
                Plugin.logger.LogWarning($"There is no image in the Custom Craft 2 assets folder named \"{item.itemID}.png\"! This item will not work correctly.");
            }

            if(cc3Exists && !File.Exists(Path.Combine(cc3Path, $"Assets/{item.itemID}.png")))
            {
                Plugin.logger.LogWarning($"There is no image in the Custom Craft 3 assets folder named \"{item.itemID}.png\"! This item will not work correctly.");
            }
        }
    }

    [Serializable]
    public enum CustomCraftVersion
    {
        NotSet,
        CC2,
        CC3
    }
}
