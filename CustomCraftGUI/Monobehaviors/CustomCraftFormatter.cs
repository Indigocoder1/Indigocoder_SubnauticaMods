using System;
using System.Collections.Generic;
using UnityEngine;
using Ingredient = CraftData.Ingredient;

namespace CustomCraftGUI.Monobehaviors
{
    public class CustomCraftFormatter : MonoBehaviour
    {
        public CustomItemsManager itemsManager;

        private CustomCraftVersion customCraftVersion = CustomCraftVersion.NotSet;

        public void SetVersion(int version)
        {
            switch (version)
            {
                case -1:
                    customCraftVersion = CustomCraftVersion.NotSet;
                    break;
                case 2:
                    customCraftVersion = CustomCraftVersion.CC2;
                    break;
                case 3:
                    customCraftVersion = CustomCraftVersion.CC3;
                    break;
                default:
                    Debug.LogError($"Invalid version number ({version}) trying to be assigned!");
                    break;
            }
        }

        public void ExportFile()
        {
            string formattedString = "# AUTOGENERATED BY CUSTOM CRAFT GUI\n";
            formattedString += "# (CREATED BY INDIGOCODER)\n\n";
            formattedString += "AliasRecipes:\n(\n";
        }

        private string GetItemAsFormattedCC2(CustomItem item, bool endOfFile)
        {
            string formattedString = "";

            formattedString += $"    ItemID: {item.itemID};\n";
            formattedString += $"    DisplayName: \"{item.nameText.text}\";\n";
            formattedString += $"    AmountCrafted: {item.amountCrafted};\n";
            formattedString += $"    Ingredients:\n";

            int ingredientIndex = 0;
            foreach (Ingredient ingredient in item.ingredients)
            {
                string endChar = ingredientIndex != item.ingredients.Count - 1 ? "," : ";";
                formattedString += $"        ( ItemID: {ingredient.techType}; Required: {ingredient.amount}; ){endChar}\n";
                ingredientIndex++;
            }

            if(item.linkedItems.Count > 0)
            {
                formattedString += "    LinkedItemIDs:";
                int linkedItemIndex = 0;
                foreach (Ingredient linkedItem in item.linkedItems)
                {
                    string endChar = linkedItemIndex != item.linkedItems.Count - 1 ? "," : ";\n";
                    for (int i = 0; i < linkedItem.amount; i++)
                    {
                        if (linkedItemIndex == item.linkedItems.Count - 1 && i < linkedItem.amount - 1)
                        {
                            endChar = ",";
                        }

                        formattedString += $"{linkedItem.techType}{endChar}";
                    }
                    linkedItemIndex++;
                }
            }

            formattedString += $"    Path:";
            for (int i = 0; i < item.fabricatorPath.Length; i++)
            {
                string currentPathPortion = item.fabricatorPath[i];
                string endChar = i == item.fabricatorPath.Length - 1 ? ";" : ",\n";
                formattedString += $"{currentPathPortion}{endChar}";
            }

            string unlockAtStart = item.unlockAtStart ? "YES" : "NO";
            formattedString += $"    ForceUnlockAtStart: {unlockAtStart};";

            return formattedString;
        }
    }

    [Serializable]
    public enum CustomCraftVersion
    {
        NotSet,
        CC2,
        CC3
    }
}
